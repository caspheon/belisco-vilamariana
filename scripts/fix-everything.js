import { neon } from '@neondatabase/serverless'

const databaseUrl = process.env.DATABASE_URL
if (!databaseUrl) {
  console.error('‚ùå DATABASE_URL n√£o configurada')
  process.exit(1)
}

const sql = neon(databaseUrl)

async function fixEverything() {
  try {
    console.log('üîß Iniciando corre√ß√£o completa do banco de dados...')
    
    // ===== PASSO 1: CORRIGIR NOMES NAS PARTIDAS =====
    console.log('\nüìù PASSO 1: Corrigindo nomes nas partidas...')
    
    // Buscar todos os jogadores
    const players = await sql`SELECT id, name FROM players ORDER BY id`
    console.log(`üìä Encontrados ${players.length} jogadores`)
    
    // Criar mapa de IDs para nomes
    const playerIdToName = {}
    players.forEach(player => {
      playerIdToName[player.id] = player.name
    })
    
    // Buscar todas as partidas
    const matches = await sql`SELECT id, players, winner FROM matches ORDER BY id`
    console.log(`üé± Encontradas ${matches.length} partidas`)
    
    let updatedMatches = 0
    let totalUpdates = 0
    
    // Verificar cada partida
    for (const match of matches) {
      let needsUpdate = false
      let updatedPlayers = [...match.players]
      let updatedWinner = Array.isArray(match.winner) ? [...match.winner] : [match.winner]
      
      // Verificar se h√° IDs em vez de nomes nos jogadores
      for (let i = 0; i < updatedPlayers.length; i++) {
        const player = updatedPlayers[i]
        if (!isNaN(player) && playerIdToName[parseInt(player)]) {
          const oldName = updatedPlayers[i]
          updatedPlayers[i] = playerIdToName[parseInt(player)]
          console.log(`  üîÑ Partida #${match.id}: ID ${oldName} ‚Üí Nome "${updatedPlayers[i]}"`)
          needsUpdate = true
          totalUpdates++
        }
      }
      
      // Verificar se h√° IDs em vez de nomes nos vencedores
      for (let i = 0; i < updatedWinner.length; i++) {
        const winner = updatedWinner[i]
        if (!isNaN(winner) && playerIdToName[parseInt(winner)]) {
          const oldName = updatedWinner[i]
          updatedWinner[i] = playerIdToName[parseInt(winner)]
          console.log(`  üèÜ Partida #${match.id}: Vencedor ID ${oldName} ‚Üí Nome "${updatedWinner[i]}"`)
          needsUpdate = true
          totalUpdates++
        }
      }
      
      // Atualizar a partida se necess√°rio
      if (needsUpdate) {
        await sql`
          UPDATE matches 
          SET players = ${updatedPlayers}, winner = ${updatedWinner}
          WHERE id = ${match.id}
        `
        updatedMatches++
        console.log(`  ‚úÖ Partida #${match.id} atualizada`)
      }
    }
    
    console.log(`\nüìã Resumo da Corre√ß√£o de Partidas:`)
    console.log(`  ‚Ä¢ Partidas verificadas: ${matches.length}`)
    console.log(`  ‚Ä¢ Partidas atualizadas: ${updatedMatches}`)
    console.log(`  ‚Ä¢ Total de corre√ß√µes: ${totalUpdates}`)
    
    // ===== PASSO 2: SINCRONIZAR ESTAT√çSTICAS DOS JOGADORES =====
    console.log('\nüìä PASSO 2: Sincronizando estat√≠sticas dos jogadores...')
    
    // Buscar jogadores novamente (pode ter mudado)
    const updatedPlayers = await sql`SELECT id, name FROM players ORDER BY id`
    
    // Buscar partidas atualizadas
    const updatedMatchesData = await sql`SELECT id, players, winner, type FROM matches ORDER BY id`
    
    let playersUpdated = 0
    
    for (const player of updatedPlayers) {
      let individualWins = 0
      let duplaWins = 0
      let individualMatches = 0
      let duplaMatches = 0
      
      // Calcular estat√≠sticas baseadas nas partidas
      for (const match of updatedMatchesData) {
        if (!match.players || !match.winner) continue
        
        const isPlayerInMatch = match.players.includes(player.name)
        if (!isPlayerInMatch) continue
        
        const winners = Array.isArray(match.winner) ? match.winner : [match.winner]
        const isPlayerWinner = winners.includes(player.name)
        
        if (match.type === 'individual') {
          individualMatches++
          if (isPlayerWinner) individualWins++
        } else if (match.type === 'dupla') {
          duplaMatches++
          if (isPlayerWinner) duplaWins++
        }
      }
      
      const totalWins = individualWins + duplaWins
      const totalMatches = individualMatches + duplaMatches
      const totalLosses = totalMatches - totalWins
      
      // Calcular novo rating (sistema simples)
      const newRating = Math.max(1000, 1000 + (totalWins * 25) - (totalLosses * 15))
      
      // Atualizar estat√≠sticas do jogador
      await sql`
        UPDATE players 
        SET 
          matches = ${totalMatches},
          wins = ${totalWins},
          losses = ${totalLosses},
          rating = ${newRating}
        WHERE id = ${player.id}
      `
      
      console.log(`  ‚úÖ ${player.name}: ${totalWins}V/${totalMatches} partidas, Rating: ${newRating}`)
      playersUpdated++
    }
    
    console.log(`\nüìã Resumo da Sincroniza√ß√£o de Estat√≠sticas:`)
    console.log(`  ‚Ä¢ Jogadores atualizados: ${playersUpdated}`)
    
    // ===== RESUMO FINAL =====
    console.log('\nüéâ CORRE√á√ÉO COMPLETA FINALIZADA!')
    console.log('‚úÖ Todos os nomes nas partidas foram corrigidos')
    console.log('‚úÖ Todas as estat√≠sticas dos jogadores foram sincronizadas')
    console.log('‚úÖ Ranking agora est√° consistente com as partidas')
    console.log('‚úÖ Partidas recentes mostram nomes corretos')
    console.log('‚úÖ Sem mais diferen√ßas entre vit√≥rias calculadas e armazenadas')
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error)
    process.exit(1)
  }
}

// Executar a corre√ß√£o completa
fixEverything()
  .then(() => {
    console.log('\nüèÅ Script finalizado com sucesso!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Erro fatal:', error)
    process.exit(1)
  })
